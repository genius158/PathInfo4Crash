plugins {    id 'com.android.application'    id 'kotlin-android'}android {    lintOptions {        checkReleaseBuilds false        // Or, if you prefer, you can continue to check for errors in release builds,        // but continue the build even when errors are found:        abortOnError false    }    compileSdkVersion 30    buildToolsVersion "30.0.2"    packagingOptions {        exclude 'jars/libs/MediaRecorderEngine.jar'    }    defaultConfig {        applicationId "com.yan.analysispageinfo"        minSdkVersion 21        targetSdkVersion 30        versionCode 1        versionName "1.0"        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"    }    buildTypes {        release {            minifyEnabled false            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'        }    }    compileOptions {        sourceCompatibility JavaVersion.VERSION_1_8        targetCompatibility JavaVersion.VERSION_1_8    }    kotlinOptions {        jvmTarget = '1.8'    }}dependencies {    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"    implementation 'androidx.core:core-ktx:1.3.2'    implementation 'androidx.appcompat:appcompat:1.2.0'    implementation 'com.google.android.material:material:1.3.0'    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'    implementation 'androidx.legacy:legacy-support-v4:1.0.0'    implementation 'androidx.recyclerview:recyclerview:1.1.0'    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'    implementation 'androidx.navigation:navigation-fragment:2.3.2'    implementation 'androidx.navigation:navigation-ui:2.3.2'    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.0'    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.0'    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.2'    implementation 'androidx.navigation:navigation-ui-ktx:2.3.2'    implementation 'androidx.annotation:annotation:1.1.0'    testImplementation 'junit:junit:4.+'    androidTestImplementation 'androidx.test.ext:junit:1.1.2'    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'    implementation project(":pathinfo")    implementation project(":test")    /*Crash捕获*/    implementation 'com.iqiyi.xcrash:xcrash-android-lib:2.4.8'    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:3.0.4'}def getDefaultAar() {    Configuration c = configurations.getByName("implementation")    def files = c.artifacts.files.filter {        it.name ==~ /.*\.aar/    }    def file = null    if (!files.empty) {        file = files[0]    }    return file}//getTasks().withType(com.android.build.gradle.internal.dependency.ExtractAarTransform).all {//    println "withType  withType withType withType withType withType"//}//afterEvaluate {//    File originalJar = file(project.projectDir.canonicalPath + "/replaceLib/MediaRecorderEngine.jar")//    println "originalJar  $originalJar.canonicalPath  ${getDefaultAar()}"////    configurations.getAsMap().each { a, b ->//        println "configurations 111 ${a}  "//////    }//    configurations.getByName("implementation").dependencies.each { d ->////        println "configurations ffffff ${d.getGroup()}  "////    }////    configurations.getByName("api").dependencies.each { d ->//        println "configurations ffffff ${d.getGroup()}  ${d.reason}  "//    }//    getRootProject().getSubprojects().each {p->//        p.getTasks().all { Task t ->//////            if (t.name.contains("AarMetadata")){////                println "AarMetadataAarMetadataAarMetadata  ${t.class}  ${t.inputs.files.toList()}"////            }//            t.doFirst {//                t.getInputs().getFiles().each { f ->//                    if (f.canonicalPath.contains("viva-mid-ve-sdk") && f.canonicalPath.endsWith("AndroidManifest.xml")) {//                        def parent = f.parentFile//                        file(parent.canonicalPath + "/jars/libs/MediaRecorderEngine.jar").delete()//                    }////                    if (f.canonicalPath.contains("viva-mid-ve-sdk") && f.canonicalPath.endsWith("/jars/libs/MediaRecorderEngine.jar")) {//                        f.delete()//                    }////                    if (f.exists()){//                        println "getInputs  iiiii   ${f.canonicalPath}"//                    }////                }//            }//        }////    }}